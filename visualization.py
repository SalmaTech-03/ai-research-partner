# visualization.py

import streamlit as st
from streamlit_agraph import agraph, Node, Edge, Config

def visualize_graph_from_query(graph, query: str):
    """
    Runs an AQL query and visualizes the resulting graph.
    This function expects a query that returns paths or nodes and edges.
    """
    try:
        # Execute the AQL query using the ArangoGraph instance
        result_cursor = graph.db.aql.execute(query)
        results = [doc for doc in result_cursor]
        
        nodes = []
        edges = []
        node_ids = set()

        # The query generated by the QA chain often returns paths (p)
        # We need to iterate through the path to extract nodes and edges
        for path in results:
            if isinstance(path, dict) and 'p' in path and 'vertices' in path['p'] and 'edges' in path['p']:
                for vertex in path['p']['vertices']:
                    if vertex['_id'] not in node_ids:
                        node_ids.add(vertex['_id'])
                        # Use the 'id' property for the label, fall back to _key
                        label = vertex.get('id', vertex.get('_key', ''))
                        nodes.append(Node(id=vertex['_id'],
                                          label=str(label),
                                          title=str(vertex), # Text on hover
                                          size=15))
                
                for edge in path['p']['edges']:
                    edges.append(Edge(source=edge['_from'],
                                      target=edge['_to'],
                                      label=edge.get('label', '')))

        if not nodes and not edges:
            st.warning("The graph query returned no data that could be visualized.")
            return

        config = Config(width=800,
                        height=500,
                        directed=True,
                        physics=True,
                        hierarchical=False,
                        # Greatly improve interaction
                        nodeHighlightBehavior=True,
                        highlightColor="#F7A7A6",
                        collapsible=True
                        )

        agraph(nodes=nodes, edges=edges, config=config)

    except Exception as e:
        # This error message will now display correctly in the Streamlit UI
        st.error(f"Failed to visualize graph. The AQL query might not be valid or might not have returned a graph structure. Error: {e}")